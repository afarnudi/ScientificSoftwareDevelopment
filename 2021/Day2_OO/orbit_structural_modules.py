import numpy as npdef planetInit(N):    coords = planetCoordInit(N)    return coords, planetVelsInit(coords)def planetCoordInit(N):    return np.random.rand(N,2)*2-1def planetVelsInit(coords):    vels = np.zeros_like(coords)    vels[:,0]=np.sqrt(1/(1+coords[:,0]**2/coords[:,1]**2))    vels[:,1]=-vels[:,0]*coords[:,0]/coords[:,1]    return vels*0.005def VelocityVerlet(planetCoords, planetVels, G):    Acce_n_1  = calcGravitationalAccel(planetCoords,G)    planetCoords += 0.5*Acce_n_1 + planetVels    planetVels   += 0.5*(calcGravitationalAccel(planetCoords,G) + Acce_n_1)     return planetCoords, planetVelsdef calcGravitationalAccel(x,G):    return vectorDir(x)*G/vectorMag(x)**2def vectorMag(x):    if len(x.shape)<2:        return np.sqrt(np.sum(np.square(x)))    else:        return np.sqrt(np.sum(np.square(x),axis=1)).reshape(x.shape[0],1)def vectorDir(x):    return -x/vectorMag(x)    